#
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: OpenWrt-CI

on:
  push:
    branches:
      - mir3g

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: mir3g

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

          df -h

      - name: Update feeds
        run: |
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Costom configure file
        run: |
          rm -f .config
          touch .config
          cat >> .config <<EOF
          # 小米路由3
          #CONFIG_TARGET_ramips=y
          #CONFIG_TARGET_ramips_mt7620=y
          #CONFIG_TARGET_ramips_mt7620_DEVICE_xiaomi_miwifi-r3=y
          # 小米路由3g
          CONFIG_TARGET_ramips=y
          CONFIG_TARGET_ramips_mt7621=y
          CONFIG_TARGET_ramips_mt7621_DEVICE_xiaomi_mir3g=y
          # x86_64
          #CONFIG_TARGET_x86_64=y
          #CONFIG_TARGET_x86_64_Generic=y
          #
          # 常用luci-app
          #
          CONFIG_PACKAGE_luci-app-ttyd=y
          CONFIG_PACKAGE_luci-app-netdata=y
          CONFIG_PACKAGE_luci-app-statistics=y
          # ssr
          CONFIG_DEFAULT_luci-app-ssr-plus=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray_plugin=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Redsocks2=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=y
          #
          # 常用命令行工具
          #
          # 系统
          CONFIG_PACKAGE_pciutils=y
          CONFIG_PACKAGE_usbutils=y
          # shell
          CONFIG_PACKAGE_screen=y
          CONFIG_PACKAGE_bash=y
          CONFIG_PACKAGE_zsh=y
          # 网络
          CONFIG_PACKAGE_ncat-ssl=y
          CONFIG_PACKAGE_nping=y
          CONFIG_PACKAGE_nmap-ssl=y
          # 无线工具
          CONFIG_PACKAGE_wireless-tools=y
          CONFIG_PACKAGE_reaver=y
          CONFIG_PACKAGE_aircrack-ng=y
          CONFIG_PACKAGE_airmon-ng=y
          # usb驱动
          CONFIG_PACKAGE_kmod-usb-ohci=y
          CONFIG_PACKAGE_kmod-usb-storage=y
          CONFIG_PACKAGE_kmod-usb-storage-extras=y
          CONFIG_PACKAGE_kmod-usb-wdm=y
          CONFIG_PACKAGE_kmod-usb3=y
          CONFIG_PACKAGE_kmod-usb-core=y
          # usb无线网卡驱动
          CONFIG_PACKAGE_rt2800-usb-firmware=y
          CONFIG_PACKAGE_kmod-rt2800-usb=y
          # usb存储驱动
          CONFIG_PACKAGE_kmod-fs-ext4=y
          CONFIG_PACKAGE_kmod-fs-vfat=y
          CONFIG_PACKAGE_kmod-fs-exfat=y
          # IPv6支持
          CONFIG_PACKAGE_ipv6helper=y
          CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
          EOF
          sed -i 's/^[ \t]*//g' .config

      - name: Generate configuration file
        run: make defconfig

      - name: Make download
        run: |
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: Prepare artifact
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: Deliver buildinfo
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: Deliver package
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: Deliver firmware
        uses: actions/upload-artifact@v2
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/


      - name: Upload release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
